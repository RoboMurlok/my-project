"use client";

import React, { useEffect, useState } from "react";
import "./MyManager.css";
import MyButton from "../MyButton/MyButton";

export default function MyManager({ lessons, lessonsDb, getDataForm }) {
  const allSubjects = lessons.filter(
    (item) =>
      item.name !== "position" && item.name !== "name" && item.name !== "edit"
  );

  const [leftSubjects, setLeftSubjects] = useState([]);
  const [rightSubjects, setRightSubjects] = useState([]);
  const [successMessage, setSuccessMessage] = useState(false);

  // useEffect(() => {
  //   if (typeof window !== "undefined") {
  //     const savedClassroom = sessionStorage.getItem("classroom") || "";
  //     setClassroom(savedClassroom);
  //   }
  // }, []);

  useEffect(() => {
    setLeftSubjects(allSubjects);
    setRightSubjects(lessonsDb);
  }, [lessons]);

  useEffect(() => {
    if (typeof window === "undefined") return;

    const stored = sessionStorage.getItem("headLessons");
    if (!stored && lessonsDb.length > 0) {
      // –µ—Å–ª–∏ sessionStorage –ø—É—Å—Ç ‚Äî –±–µ—Ä—ë–º –∏–∑ –ø—Ä–æ–ø—Å–∞ lessonsDb
      sessionStorage.setItem("headLessons", JSON.stringify(lessonsDb));
    }

    const data =
      JSON.parse(sessionStorage.getItem("headLessons")) || lessonsDb || [];

    const difference = allSubjects.filter(
      (subject) => !data.some((s) => s.name === subject.name)
    );

    setLeftSubjects(difference);
    setRightSubjects(data);
  }, [lessonsDb]); // ‚úÖ —Å–ª–µ–¥–∏–º –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–ø—Å–∞

  // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∏–∑ –ª–µ–≤–æ–≥–æ (–¥–æ—Å—Ç—É–ø–Ω—ã–µ) –≤ –ø—Ä–∞–≤—ã–π (–≤—ã–±—Ä–∞–Ω–Ω—ã–µ)
  const moveToRight = (subject) => {
    if (rightSubjects.find((s) => s.name === subject.name)) return;
    setLeftSubjects((prev) => prev.filter((s) => s.name !== subject.name));
    setRightSubjects((prev) => [...prev, subject]);
    setSuccessMessage(false);
  };

  // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –≤–ª–µ–≤–æ
  const moveToLeft = (subject) => {
    if (leftSubjects.find((s) => s.name === subject.name)) return;
    setRightSubjects((prev) => prev.filter((s) => s.name !== subject.name));
    setLeftSubjects((prev) => [...prev, subject]);
    setSuccessMessage(false);
  };

  // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑ ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–∞–≤–æ–≥–æ –±–ª–æ–∫–∞
  const moveUp = (index) => {
    if (index <= 0) return;
    setRightSubjects((prev) => {
      const copy = [...prev];
      [copy[index - 1], copy[index]] = [copy[index], copy[index - 1]];
      return copy;
    });
    setSuccessMessage(false);
  };

  const moveDown = (index) => {
    setRightSubjects((prev) => {
      if (index >= prev.length - 1) return prev;
      const copy = [...prev];
      [copy[index + 1], copy[index]] = [copy[index], copy[index + 1]];
      return copy;
    });
    setSuccessMessage(false);
  };

  const saveLessons = async () => {
    // if (rightSubjects.length === 0) return;

    const formData = rightSubjects.map((item) => item.name);
    const lessonsSession = rightSubjects;

    sessionStorage.removeItem("headLessons");
    try {
      // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      await getDataForm(formData, lessonsSession);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ sessionStorage
      sessionStorage.setItem("headLessons", JSON.stringify(lessonsSession));

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      const difference = allSubjects.filter(
        (subject) => !rightSubjects.some((s) => s.name === subject.name)
      );
      setLeftSubjects(difference);
      setRightSubjects(rightSubjects);

      setSuccessMessage(true);

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫
      setTimeout(() => setSuccessMessage(false), 1500);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —É—Ä–æ–∫–æ–≤:", err);
    }
  };

  const resetDefaults = () => {
    sessionStorage.removeItem("headLessons");
    setLeftSubjects(allSubjects);
    setRightSubjects([]);
    setSuccessMessage(false);
  };

  return (
    <div className="subjects-manager">
      <div className="subjects-block">
        <h2>–î–æ—Å—Ç—É–ø–Ω—ñ –ø—Ä–µ–¥–º–µ—Ç–∏</h2>
        <ul>
          {leftSubjects.length === 0 && <li>–í—Å—ñ –ø—Ä–µ–¥–º–µ—Ç–∏ –æ–±—Ä–∞–Ω—ñ</li>}
          {leftSubjects.map((subject) => (
            <li
              key={subject.name}
              className="subject-label"
              onClick={() => moveToRight(subject)}
              title="–ö–ª—ñ–∫ ‚Äî –¥–æ–¥–∞—Ç–∏ –ø—Ä–∞–≤–æ—Ä—É—á"
              role="button"
              tabIndex={0}
              onKeyDown={(e) =>
                e.key === "Enter" ? moveToRight(subject) : null
              }
            >
              {subject.value}
            </li>
          ))}
        </ul>
        <MyButton className="red" onClick={resetDefaults}>
          ‚ôª –°–∫–∏–Ω—É—Ç–∏ –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É
        </MyButton>
      </div>
      <div className="subjects-block">
        <h2>–í–∏–±—Ä–∞–Ω—ñ –ø—Ä–µ–¥–º–µ—Ç–∏</h2>
        <ul>
          {rightSubjects.length === 0 && <li>–¢—É—Ç –±—É–¥—É—Ç—å –≤–∏–±—Ä–∞–Ω—ñ –ø—Ä–µ–¥–º–µ—Ç–∏</li>}
          {rightSubjects.map((subject, index) => (
            <li key={subject.name}>
              <span
                className="subject-label"
                onClick={() => moveToLeft(subject)}
                title="–ö–ª—ñ–∫ ‚Äî –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –≤–ª—ñ–≤–æ"
                role="button"
                tabIndex={0}
                onKeyDown={(e) =>
                  e.key === "Enter" ? moveToLeft(subject) : null
                }
              >
                {subject.value}
              </span>

              <div className="move-buttons">
                <MyButton
                  aria-label={`–ü–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ ${subject.value} –≤–≥–æ—Ä—É`}
                  onClick={() => moveUp(index)}
                  disabled={index === 0}
                >
                  ‚ñ≤
                </MyButton>
                <MyButton
                  aria-label={`–ü–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ ${subject.value} –≤–Ω–∏–∑`}
                  onClick={() => moveDown(index)}
                  disabled={index === rightSubjects.length - 1}
                >
                  ‚ñº
                </MyButton>
              </div>
            </li>
          ))}
        </ul>
        <MyButton className="green" onClick={saveLessons}>
          üíæ –ó–±–µ—Ä–µ–≥—Ç–∏
        </MyButton>
        {successMessage && (
          <span className="success-message box">–ó–±–µ—Ä–µ–∂–µ–Ω–æ ‚úì</span>
        )}
      </div>
    </div>
  );
}
