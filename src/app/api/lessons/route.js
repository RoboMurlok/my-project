import { NextResponse } from "next/server";
import Student from "../connectDb/models/Student";
import LessonsManager from "../connectDb/models/LessonsManager";
import { classDb } from "../connectDb/classDb";

// =========================
// üîπ POST ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
// =========================
export async function POST(req) {
  try {
    const { formData, lessonsSession, classroom } = await req.json();

    if (
      !formData ||
      !Array.isArray(formData) ||
      !classroom ||
      !lessonsSession
    ) {
      return NextResponse.json(
        { success: false, message: "–ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ (—É—Ä–æ–∫–∏ –∞–±–æ –∫–ª–∞—Å –Ω–µ –≤–∫–∞–∑–∞–Ω—ñ)" },
        { status: 400 }
      );
    }

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –Ω—É–∂–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
    const conn = await classDb(classroom);

    // –ú–æ–¥–µ–ª—å LessonsManager
    const LessonsManagerModel =
      conn.models.LessonsManager ||
      conn.model("LessonsManager", LessonsManager.schema);

    // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    let lessonsDoc = await LessonsManagerModel.findOne();

    if (!lessonsDoc) {
      // –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
      lessonsDoc = new LessonsManagerModel({ headLessons: lessonsSession });
    } else {
      // üîπ –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
      const existingNames = lessonsDoc.headLessons.map((l) => l.name);
      lessonsSession.forEach((lesson) => {
        if (!existingNames.includes(lesson.name)) {
          lessonsDoc.headLessons.push(lesson);
        }
      });

      // üîπ –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ formData
      lessonsDoc.headLessons = lessonsDoc.headLessons.filter((lesson) =>
        formData.includes(lesson.name)
      );
    }

    await lessonsDoc.save();

    // =============================
    // üîπ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É —É—á–µ–Ω–∏–∫–æ–≤
    // =============================
    const StudentModel =
      conn.models.Student || conn.model("Student", Student.schema);

    const students = await StudentModel.find();

    const updates = students.map(async (student) => {
      const currentLessons = { ...student.lessons };
      const currentLessonsTotal = { ...student.lessonsTotal };

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —É—Ä–æ–∫–∏
      formData.forEach((lesson) => {
        if (!(lesson in currentLessons)) currentLessons[lesson] = [];
        if (!(lesson in currentLessonsTotal)) currentLessonsTotal[lesson] = 0;
      });

      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —É—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ formData
      Object.keys(currentLessons).forEach((key) => {
        if (!formData.includes(key)) delete currentLessons[key];
      });
      Object.keys(currentLessonsTotal).forEach((key) => {
        if (!formData.includes(key)) delete currentLessonsTotal[key];
      });

      student.lessons = currentLessons;
      student.lessonsTotal = currentLessonsTotal;

      return student.save();
    });

    const result = await Promise.all(updates);

    return NextResponse.json({
      success: true,
      message: `–ü—Ä–µ–¥–º–µ—Ç–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ —É –∫–ª–∞—Å—ñ ${classroom}`,
      modifiedCount: result.length,
    });
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —É—á–Ω—ñ–≤:", error);
    return NextResponse.json(
      { success: false, message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —É—á–Ω—ñ–≤" },
      { status: 500 }
    );
  }
}

// =========================
// üîπ GET ‚Äî –ø–æ–ª—É—á–∏—Ç—å headLessons
// =========================
export async function GET(req) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∫–ª–∞—Å—Å–∞ –∏–∑ query (?classroom=5B)
    const { searchParams } = new URL(req.url);
    const classroom = searchParams.get("classroom");

    if (!classroom) {
      return NextResponse.json(
        { success: false, message: "–ù–µ –≤–∫–∞–∑–∞–Ω–æ classroom" },
        { status: 400 }
      );
    }

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –Ω—É–∂–Ω–æ–π –±–∞–∑–µ
    const conn = await classDb(classroom);

    // –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å
    const LessonsManagerModel =
      conn.models.LessonsManager ||
      conn.model("LessonsManager", LessonsManager.schema);

    const lessonsDoc = await LessonsManagerModel.findOne();

    if (!lessonsDoc) {
      return NextResponse.json({
        success: true,
        headLessons: [],
        message: "–£—Ä–æ–∫–∏ —â–µ –Ω–µ –¥–æ–¥–∞–Ω—ñ",
      });
    }

    return NextResponse.json({
      success: true,
      headLessons: lessonsDoc.headLessons,
    });
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ headLessons:", error);
    return NextResponse.json(
      { success: false, message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ headLessons" },
      { status: 500 }
    );
  }
}

