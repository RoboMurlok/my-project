import { NextResponse } from "next/server";
import Student from "../connectDb/models/Student";
import { classDb } from "../connectDb/classDb";

export async function POST(req) {
  try {
    const { formData, classroom } = await req.json();

    if (!formData || !classroom) {
      return NextResponse.json(
        { message: "–£—á–µ–Ω—å –Ω–µ–∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π", success: false },
        { status: 400 }
      );
    }

    // üîπ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –Ω—É–∂–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
    const conn = await classDb(classroom);

    // üîπ –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑ —ç—Ç–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const StudentModel =
      conn.models.Student || conn.model("Student", Student.schema);

    // üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É—á–µ–Ω–∏–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –∏ –¥–∞—Ç–æ–π —Ä–æ–∂–¥–µ–Ω–∏—è
    const existingStudent = await StudentModel.findOne({
      name: formData.name,
      age: formData.age,
    });

    if (existingStudent) {
      return NextResponse.json({
        success: false,
        message: `–£—á–µ–Ω—å –≤–∂–µ —ñ—Å–Ω—É—î –≤ –∫–ª–∞—Å—ñ ${classroom}`,
      });
    }

    // üîπ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∞
    const newStudent = new StudentModel(formData);
    await newStudent.save();

    return NextResponse.json({
      message: `–£—á–µ–Ω—å ${formData.name} –¥–æ–¥–∞–Ω–∏–π –¥–æ –∫–ª–∞—Å—É ${classroom}`,
      success: true,
    });
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —É—á–Ω—è:", error);
    return NextResponse.json(
      { success: false, message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —É—á–Ω—è" },
      { status: 500 }
    );
  }
}

export async function GET(req) {
  try {
    const { searchParams } = new URL(req.url);
    const classroom = searchParams.get("classroom");

    if (!classroom) {
      return NextResponse.json(
        { success: false, message: "–ù–µ –≤–∫–∞–∑–∞–Ω–æ classroom" },
        { status: 400 }
      );
    }

    const conn = await classDb(classroom);
    const StudentModel =
      conn.models.Student || conn.model("Student", Student.schema);

    const studentsDb = await StudentModel.find();

    const students = studentsDb.map((s) => ({
      ...s._doc,
      age: new Date(s.age).toLocaleDateString("uk-UA"),
    }));

    return NextResponse.json({ success: true, students }, { status: 200 });
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —É—á–Ω—ñ–≤:", error);
    return NextResponse.json(
      { success: false, message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —É—á–Ω—ñ–≤" },
      { status: 500 }
    );
  }
}

export async function PUT(req) {
  try {
    const { formData, classroom } = await req.json();

    if (!formData || !classroom) {
      return NextResponse.json(
        { success: false, message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è" },
        { status: 400 }
      );
    }

    // üîπ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –Ω—É–∂–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
    const conn = await classDb(classroom);

    // üîπ –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑ —ç—Ç–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const StudentModel =
      conn.models.Student || conn.model("Student", Student.schema);

    // üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É—á–µ–Ω–∏–∫
    const existingStudent = await StudentModel.findById({ _id: formData._id });

    if (!existingStudent) {
      return NextResponse.json({
        success: false,
        message: `–£—á–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É –∫–ª–∞—Å—ñ ${classroom}`,
      });
    }

    // üîπ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è —É—á–µ–Ω–∏–∫–∞
    Object.assign(existingStudent, formData);
    await existingStudent.save();

    return NextResponse.json({
      success: true,
      message: `–î–∞–Ω—ñ —É—á–Ω—è ${existingStudent.name} –æ–Ω–æ–≤–ª–µ–Ω–æ`,
      updatedStudent: existingStudent,
    });
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —É—á–Ω—è:", error);
    return NextResponse.json(
      { success: false, message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —É—á–Ω—è" },
      { status: 500 }
    );
  }
}

export async function DELETE(req) {
  try {
    const { student, classroom } = await req.json();

    if (!student || !classroom) {
      return NextResponse.json(
        { message: "–£—á–µ–Ω—å –Ω–µ–∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π", success: false },
        { status: 400 }
      );
    }

    // üîπ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –Ω—É–∂–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
    const conn = await classDb(classroom);

    // üîπ –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑ —ç—Ç–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const StudentModel =
      conn.models.Student || conn.model("Student", Student.schema);

    // üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É—á–µ–Ω–∏–∫ —Å —Ç–∞–∫–∏–º student
    const existingStudent = await StudentModel.findOne({
      _id: student,
    });

    if (!existingStudent) {
      return NextResponse.json({
        success: false,
        message: `–£—á–µ–Ω—å –Ω–µ —ñ—Å–Ω—É—î –≤ –∫–ª–∞—Å—ñ ${classroom}`,
      });
    }

    // üîπ –£–¥–∞–ª—è–µ–º —É—á–µ–Ω–∏–∫–∞
    await StudentModel.deleteOne({ _id: student });

    return NextResponse.json({
      message: `–£—á–µ–Ω—å –≤–∏–¥–∞–ª–µ–Ω–∏–∏–π –∑ –∫–ª–∞—Å—É ${classroom}`,
      success: true,
    });
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —É—á–Ω—è:", error);
    return NextResponse.json(
      { success: false, message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —É—á–Ω—è" },
      { status: 500 }
    );
  }
}
